import {
  Injectable,
  Inject,
  BadRequestException,
  InternalServerErrorException,
  NotFoundException,
} from '@nestjs/common';
import {
  ICollateralByKedinasanRepository,
  COLLATERAL_KEDINASAN_EXTERNAL_REPOSITORY,
} from '../../Domain/Repositories/collateral-kedinasan-external.repository';
import { CollateralByKedinasan } from '../../Domain/Entities/collateral-kedinasan-external.entity';
import { CreatePengajuanKedinasanDto } from '../DTOS/dto-Collateral-Kedinasan/create-collateral-kedinasan.dto';
import { UpdatePengajuanKedinasanDto } from '../DTOS/dto-Collateral-Kedinasan/update-collateral-kedinasan.dto';

@Injectable()
export class CollateralKedinasanExternalService {
  constructor(
    @Inject(COLLATERAL_KEDINASAN_EXTERNAL_REPOSITORY)
    private readonly repo: ICollateralByKedinasanRepository,
  ) {}

  async create(dto: CreatePengajuanKedinasanDto): Promise<CollateralByKedinasan> {
    const now = new Date();

    if (!dto.pengajuan_id) {
      throw new BadRequestException('Pengajuan ID harus diisi.');
    }

    const collateral = new CollateralByKedinasan(
      { id: dto.pengajuan_id },
      dto.instansi,
      dto.surat_permohonan_kredit,
      dto.surat_pernyataan_penjamin,
      dto.surat_persetujuan_pimpinan,
      dto.surat_keterangan_gaji,
      undefined, // ID autogenerated
      now,
      now,
      null,
    );

    try {
      return await this.repo.save(collateral);
    } catch (error) {
      console.error('Create Collateral Kedinasan Error:', error);
      throw new InternalServerErrorException('Gagal membuat collateral kedinasan');
    }
  }

  async update(id: number, dto: UpdatePengajuanKedinasanDto): Promise<CollateralByKedinasan> {
    const existing = await this.repo.findById(id);
    if (!existing) {
      throw new NotFoundException(`Collateral Kedinasan dengan ID ${id} tidak ditemukan`);
    }

    const updateData: Partial<{
      instansi?: string;
      surat_permohonan_kredit?: string;
      surat_pernyataan_penjamin?: string;
      surat_persetujuan_pimpinan?: string;
      surat_keterangan_gaji?: string;
    }> = {};

    if (dto.instansi !== undefined) updateData.instansi = dto.instansi;
    if (dto.surat_permohonan_kredit !== undefined) updateData.surat_permohonan_kredit = dto.surat_permohonan_kredit;
    if (dto.surat_pernyataan_penjamin !== undefined) updateData.surat_pernyataan_penjamin = dto.surat_pernyataan_penjamin;
    if (dto.surat_persetujuan_pimpinan !== undefined) updateData.surat_persetujuan_pimpinan = dto.surat_persetujuan_pimpinan;
    if (dto.surat_keterangan_gaji !== undefined) updateData.surat_keterangan_gaji = dto.surat_keterangan_gaji;

    try {
      return await this.repo.update(id, updateData);
    } catch (error) {
      console.error('Update Collateral Kedinasan Error:', error);
      throw new InternalServerErrorException('Gagal mengupdate collateral kedinasan');
    }
  }

  async findById(id: number): Promise<CollateralByKedinasan> {
    const collateral = await this.repo.findById(id);
    if (!collateral) {
      throw new NotFoundException(`Collateral Kedinasan dengan ID ${id} tidak ditemukan`);
    }
    return collateral;
  }

  async findAll(): Promise<CollateralByKedinasan[]> {
    try {
      return await this.repo.findAll();
    } catch (error) {
      console.error('Find All Collateral Kedinasan Error:', error);
      throw new InternalServerErrorException('Gagal mengambil data collateral kedinasan');
    }
  }

  async delete(id: number): Promise<void> {
    const collateral = await this.repo.findById(id);
    if (!collateral) {
      throw new NotFoundException(`Collateral Kedinasan dengan ID ${id} tidak ditemukan`);
    }

    try {
      await this.repo.delete(id);
    } catch (error) {
      console.error('Delete Collateral Kedinasan Error:', error);
      throw new InternalServerErrorException('Gagal menghapus collateral kedinasan');
    }
  }
}
